---
- name: Deploy, configure, and populate Postgres 10
  hosts: database_servers
  become: true
  gather_facts: false
  tags:
    - database_servers
  vars:
    postgres_rhel7_repo: "https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    postgres_packages:
      - postgresql10 
      - postgresql10-server 
      - postgresql10-contrib 
      - postgresql10-libs
    postgres_library: python-psycopg2
    postgres_10_data_dir: /var/lib/pgsql/10/data
    postgres_10_bin_path: /usr/pgsql-10/bin
    postgres_service: postgresql-10.service
    postgres_port: 5432
    postgres_user: postgres
    postgres_users:
      - name: flask
        password: redhat
        database: flask_db
        state: present
        priv: ALL
    postgres_databases:
      - name: flask_db
        owner: flask
      - name: books_store
        owner: flask    
    
  tasks:

    - name: Install Postgres packages
      package:
        name: "{{ __package }}"
        state: present
      loop: 
        - "{{ postgres_rhel7_repo }}"        
        - "{{ postgres_packages }}"
        - "{{ postgres_library }}"
      loop_control:
        loop_var: __package

    - name: Check if Postgres initialized
      stat:
        path: "{{ postgres_10_data_dir }}/PG_VERSION"
      register: r_postgres_init_dir_state

    - when: not r_postgres_init_dir_state.stat.exists
      name: Run Postgres initdb to initialize if postgres not initialized
      command: "{{ postgres_10_bin_path }}/postgresql-10-setup initdb"
      notify: restart_postgres

    - name: Setup Postgres for remote password auth
      template:
        src: pg_hba.conf.j2
        dest: "{{ postgres_10_data_dir }}/pg_hba.conf"
      notify: restart_postgres

    - name: Setup Postgres to listen on network interfaces
      lineinfile:
        dest: "{{ postgres_10_data_dir }}/postgresql.conf"
        line: "listen_addresses = '*'"
        insertafter: "#listen_addresses"
      notify: restart_postgres

    - name: Setup Postgres as started and enabled on boot.
      service:
        name: "{{ postgres_service }}"
        state: "{{ postgres_service_state | default('started') }}"
        enabled: "{{ postgres_service_enabled | default(true) }}"

    - name: Configure Postgres resources, user, database etc 
      block:

        - name: Setup Postgres database(s) 
          postgresql_db:
            name: "{{ __database.name }}"
            state: "{{ __database.state | default('present') }}"
          loop: "{{ postgres_databases }}"
          loop_control:
            loop_var: __database

        - name: Create Postgres user#(s) 
          postgresql_user:
            name: "{{ __user.name }}"
            password: "{{ __user.password | default(omit) }}"
            encrypted: true # "{{ __user.encrypted | default(omit) }}"
            priv: "{{ __user.priv | default(omit) }}"
            db: "{{ __user.database | default(omit) }}"
            # role_attr_flags: "{{ __user.role_attr_flags | default(omit) }}"
            state: "{{ __user.state | default('present') }}"
          loop: "{{ postgres_users }}"
          loop_control:
            loop_var: __user
          no_log: "{{ postgres_user_no_log_state | default(false) }}" 


      become_user: "{{ postgres_user }}"

  handlers:

    - name: restart_postgres
      service:
        name: "{{ postgres_service }}"
        state: restarted

- name: Deploy, configure, and populate flask repo and virtualenv
  hosts: app_servers
  become: true
  gather_facts: false
  tags:
    - application_servers
    - flask
    
  vars:
    flask_app_name: resource_hub
    flask_user: flask
    flask_home: /opt/
    flask_repo: https://github.com/tonykay/resource_hub.git  
    flask_scm_ref: main  
    flask_app_lauch_script: /usr/local/bin/launch_resource_hub   
    virtualenv_name: "venv-{{ flask_app_name }}"  
    virtualenv_home: /opt/virtual_envs
    virtualenv_python: /usr/bin/python3
      

    app_yum_packages:
      - autoconf
      - automake
      - git
      - gcc
      - libtool
      - python3
      - python3-devel
      - python3-pip
      - python-psycopg2

    pip_dependencies:
      - virtualenv
      - pip  
      - psycopg2-binary

  tasks:

    - name: Create flask user
      user:
        name: "{{ flask_user }}"
        state: present  

    - name: Install flask packages
      package:
        name: "{{ __package }}"
        state: present
      loop: "{{ app_yum_packages }}"        
      loop_control:
        loop_var: __package

    - name: "Install flask repo {{ flask_repo }}"
      git:
        repo: "{{ flask_repo }}"
        dest: "{{ flask_home }}/{{ flask_app_name }}"
        update: yes 
        force: yes
      tags:
        - git

    - name: "Change flash repo owner to {{ flask_user }} recursively"      
      file: 
        dest: "{{ flask_home }}/{{ flask_app_name }}"
        owner: "{{ flask_user }}"

    - name: virtualenv setup
      block:

        - name: Setup pre-requisite pip3 packages
          pip:
            name: "{{ pip_dependencies }}"
            state: latest
            executable: /usr/bin/pip3

        - name: "Create virtualenv {{ virtualenv_name }} for Flask"
          pip:
            requirements: "{{ flask_home }}/{{ flask_app_name }}/requirements.txt"
            virtualenv: "{{ virtualenv_home }}/{{ flask_app_name }}"
            virtualenv_site_packages: no
            virtualenv_command: /usr/local/bin/virtualenv
      tags:
        - venv
        - virtualenv  
          
    - name: Initialize flask app database resources
      command: "{{ virtualenv_home }}/{{ flask_app_name }}/bin/python3 {{ flask_home }}/{{ flask_app_name }}/config.py"
      run_once: true

    - name: "Generate {{ flask_app_name }} startup script"    
      template:
        src: launch_resource_hub.j2
        dest: /usr/local/bin/launch_resource_hub   
        mode: '0555'

    - name: template systemd service config
      template:
        src: flask_service.j2
        dest: /etc/systemd/system/{{ flask_app_name }}.service
        mode: '0755'

    - name: start systemd app service
      systemd: 
        name: "{{ flask_app_name }}.service"
        state: restarted 
        enabled: yes

- name: Deploy haproxy load balancer
  hosts: load_balancers
  gather_facts: false 
  become: true

  vars:
    load_balancer_packages:
      - haproxy

  tags:
    - load_balancers

  tasks:

    - name: Install load balancer packages
      package:
        name: "{{ load_balancer_packages }}"
        state: present

    - name: Configure haproxy load balancing
      template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      notify: restart_haproxy

    - name: Enable Haproxy
      service:
        name: haproxy
        state: started
        enabled: true

  handlers:

    - name: restart_haproxy
      service:
        name: haproxy
        state: restarted

- name: End to end smoke tests
  hosts: app_servers:database_servers
  gather_facts: true
  become: true
  tags:
    - smoketest  

  tasks:

    - debug:
        msg: 
          - "IP is {{ hostvars['appdb1']['ansible_default_ipv4']['address'] }}"
          - "First App server  {{ groups.app_servers[0] }}" 
        verbosity: 2        

    - name: Smoketest Postgres database
      postgresql_ping:
        db: flask_db
        login_host: "{{ hostvars['appdb1']['ansible_default_ipv4']['address'] }}"
        login_user: flask
        login_password: redhat
        ssl_mode: disable
      delegate_to: "{{ groups.app_servers[0] }}"
      run_once: true
      tags:
        - smoketest

- name: End to end smoke tests
  hosts: app_servers
  become: false
  gather_facts: false
  tags:
    - smoketest  
  tasks:
 
    - name: Check webserver for correct response
      uri:
      #  url: "http://frontend1.{{ GUID }}.example.opentlc.com/ping"
        url: "http://frontend1/ping"
        return_content: yes
      until: '"alive" in result.content'
      retries: 10
      delay: 1
      register: result
      delegate_to: localhost
